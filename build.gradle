/*
 * Copyright 2016-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license.
 */
import org.jetbrains.kotlin.gradle.dsl.KotlinCompile
import org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootExtension
import org.jetbrains.kotlin.gradle.targets.js.npm.tasks.KotlinNpmInstallTask
import org.jetbrains.kotlin.gradle.tasks.Kotlin2JsCompile
import org.jetbrains.kotlin.gradle.tasks.KotlinNativeCompile
import org.jetbrains.kotlin.konan.target.HostManager

plugins {
    alias(libs.plugins.kotlinx.binaryCompatibilityValidator)
    alias(libs.plugins.gradle.nodePlugin)
    alias(libs.plugins.kotlin.jvm) apply(false)
}

ext.native_targets_enabled = !project.hasProperty("disable_native_targets")

allprojects {
    // the only place where HostManager could be instantiated
    project.ext.hostManager = new HostManager()

    logger.info("Using Kotlin compiler ${libs.versions.kotlin} for project ${project.name}")


    def deployVersion = project.findProperty("DeployVersion")
    if (deployVersion != null) project.version = deployVersion

    // atomicfu-native check is a kludge so that existing YouTrack config works, todo: remove
    if (project != rootProject && project.name != "atomicfu-native") {
        apply from: rootProject.file("gradle/publishing.gradle")
    }

    // this fixes "org.gradle.jvm.version" in Gradle metadata
    plugins.withType(JavaPlugin).configureEach {
        java {
            toolchain {
                languageVersion.set(JavaLanguageVersion.of(8))
            }
        }
    }

    tasks.withType(Kotlin2JsCompile).configureEach {
        compilerOptions { freeCompilerArgs.add("-Xpartial-linkage-loglevel=ERROR") }
    }
    tasks.withType(KotlinNativeCompile).configureEach {
        compilerOptions { freeCompilerArgs.add("-Xpartial-linkage-loglevel=ERROR") }
    }

    tasks.withType(KotlinCompile).configureEach {
        // Suppress the warning: 'expect'/'actual' classes (including interfaces, objects, annotations, enums, and 'actual' typealiases) are in Beta.
        // See: https://youtrack.jetbrains.com/issue/KT-61573
        compilerOptions { freeCompilerArgs.add("-Xexpect-actual-classes") }
    }
}

def buildSnapshotTrainGradleProperty = project.findProperty("build_snapshot_train")
ext.build_snapshot_train = buildSnapshotTrainGradleProperty != null && buildSnapshotTrainGradleProperty != ""
if (build_snapshot_train) {
    afterEvaluate {
        println "Manifest of kotlin-compiler-embeddable.jar for atomicfu"
        configure(subprojects.findAll { it.name == "atomicfu" }) {
            configurations.matching { it.name == "kotlinCompilerClasspath" }.configureEach {
                resolvedConfiguration.getFiles().findAll { it.name.contains("kotlin-compiler-embeddable") }.each {
                    def manifest = zipTree(it).matching {
                        include 'META-INF/MANIFEST.MF'
                    }.getFiles().first()

                    manifest.readLines().each {
                        println it
                    }
                }
            }
        }
    }
}

// main deployment task
task deploy(dependsOn: getTasksByName("publish", true) + getTasksByName("publishNpm", true))

// Right now it is used for switching nodejs version which is supports generated wasm bytecode
extensions.findByType(NodeJsRootExtension.class).with {
    // canary nodejs that supports recent Wasm GC changes
    it.nodeVersion = '21.0.0-v8-canary202309167e82ab1fa2'
    it.nodeDownloadBaseUrl = 'https://nodejs.org/download/v8-canary'
}

// We need to ignore unsupported engines (i.e. canary) for npm
tasks.withType(KotlinNpmInstallTask).configureEach {
    args.add("--ignore-engines")
}
