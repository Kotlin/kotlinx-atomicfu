apply plugin: 'kotlin-platform-jvm'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    expectedBy project(":atomicfu-common")

    testCompile project(":atomicfu-transformer")
    testCompile "junit:junit:$junit_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
}

def classesPreAtomicFuDir = file("$buildDir/classes/kotlin/test")
def classesPostTransformFU = file("$buildDir/classes/kotlin/postTransformedFU")
def classesPostTransformVH = file("$buildDir/classes/kotlin/postTransformedVH")
def classesPostTransformBOTH = file("$buildDir/classes/kotlin/postTransformedBOTH")

task configureDirs(dependsOn: compileTestKotlin) {
    (sourceSets.test.output.classesDirs as ConfigurableFileCollection).setFrom(classesPostTransformFU, classesPostTransformVH, classesPostTransformBOTH)
}

task checkJdk16() {
    doLast {
        if (!System.env.JDK_16) {
            throw new GradleException("JDK_16 environment variable is not defined. " +
                    "Can't build against JDK 1.6 runtime and run JDK 1.6 compatibility tests. " +
                    "Please ensure JDK 1.6 is installed and that JDK_16 points to it.")
        }
    }
}

task transformFU(type: JavaExec, dependsOn: compileTestKotlin) {
    main = "kotlinx.atomicfu.transformer.AtomicFUTransformerKt"
    args = [classesPreAtomicFuDir, classesPostTransformFU, "FU"]
    classpath = sourceSets.test.runtimeClasspath
    inputs.dir(classesPreAtomicFuDir)
    outputs.dir(classesPostTransformFU)
}

task transformBOTH(type: JavaExec, dependsOn: compileTestKotlin) {
    main = "kotlinx.atomicfu.transformer.AtomicFUTransformerKt"
    args = [classesPreAtomicFuDir, classesPostTransformBOTH, "BOTH"]
    classpath = sourceSets.test.runtimeClasspath
    inputs.dir(classesPreAtomicFuDir)
    outputs.dir(classesPostTransformBOTH)
}

task transformVH(type: JavaExec, dependsOn: compileTestKotlin) {
    main = "kotlinx.atomicfu.transformer.AtomicFUTransformerKt"
    args = [classesPreAtomicFuDir, classesPostTransformVH, "VH"]
    classpath = sourceSets.test.runtimeClasspath
    inputs.dir(classesPreAtomicFuDir)
    outputs.dir(classesPostTransformVH)
}

task transformedTestFU_6(type: Test, dependsOn: [checkJdk16, transformFU]) {
    executable = "$System.env.JDK_16/bin/java"
    classpath = files(configurations.testRuntime, classesPostTransformFU)
    exclude '**/*LFTest.*'
}

task transformedTestFU_current(type: Test, dependsOn: transformFU) {
    classpath = files(configurations.testRuntime, classesPostTransformFU)
    exclude '**/*LFTest.*'
}


task transformedTestBOTH_6(type: Test, dependsOn: [checkJdk16, transformBOTH]) {
    executable = "$System.env.JDK_16/bin/java"
    classpath = files(configurations.testRuntime, classesPostTransformBOTH)
    exclude '**/*LFTest.*'
}

task transformedTestBOTH_current(type: Test, dependsOn: transformBOTH) {
    classpath = files(configurations.testRuntime, classesPostTransformBOTH)
    exclude '**/*LFTest.*'
}

task transformedTestVH(type: Test, dependsOn: transformVH) {
    classpath = files(configurations.testRuntime, classesPostTransformVH)
    exclude '**/*LFTest.*'
}

transformedTestVH.onlyIf {
    logger.println(JavaVersion.current())
    JavaVersion.current().ordinal() >= JavaVersion.VERSION_1_9.ordinal()
}


task testAll(dependsOn: [transformedTestFU_6, transformedTestFU_current, transformedTestBOTH_6, transformedTestBOTH_current,  transformedTestVH]) {}

tasks.withType(Test) {
    testLogging {
        showStandardStreams = true
        events "passed", "failed"
    }
}

test.dependsOn testAll

