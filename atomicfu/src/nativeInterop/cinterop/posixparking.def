headers = stdlib.h stdint.h pthread.h
---
typedef struct {
    pthread_mutex_t mutex;
    pthread_cond_t cond;
    uint64_t wake;
} posix_combo_t;

posix_combo_t* posixParkInit() {
    posix_combo_t* pc = malloc(sizeof(posix_combo_t));
    pthread_mutex_init(&pc->mutex, NULL);
    pthread_cond_init(&pc->cond, NULL);
    pc->wake = 0;
    return pc;
}

void posixWait(posix_combo_t* pc) {
    pthread_mutex_lock(&pc->mutex);
    while(!pc->wake) {
        pthread_cond_wait(&pc->cond, &pc->mutex);
    }
    pthread_mutex_unlock(&pc->mutex);
    pthread_mutex_destroy(&pc->mutex);
    pthread_cond_destroy(&pc->cond);
    free(pc);
}

void posixWake(posix_combo_t* pc) {
    pthread_mutex_lock(&pc->mutex);
    pc->wake = 1;
    pthread_cond_signal(&pc->cond);
    pthread_mutex_unlock(&pc->mutex);
}

void posixDestroy(posix_combo_t* pc) {
    pthread_mutex_destroy(&pc->mutex);
    pthread_cond_destroy(&pc->cond);
    free(pc);
}

