/*
 * Copyright 2017-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license.
 */

apply plugin: 'kotlin'
apply plugin: 'java-gradle-plugin'

// Gradle plugin must be compiled targeting the same Kotlin version as used by Gradle
kotlin.sourceSets.configureEach {
    languageSettings {
        languageVersion = KotlinConfiguration.getOverridingKotlinLanguageVersion(project) ?: "1.4"
        apiVersion = KotlinConfiguration.getOverridingKotlinApiVersion(project) ?: "1.4"
    }
}

dependencies {
    implementation(project(":atomicfu-transformer")) {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
    }

    compileOnly gradleApi()
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib'
    compileOnly "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    // Atomicfu compiler plugin dependency will be loaded to kotlinCompilerPluginClasspath
    // Atomicfu plugin will only be applied if the flag is set kotlinx.atomicfu.enableJsIrTransformation=true
    compileOnly "org.jetbrains.kotlin:atomicfu:$kotlin_version"
    runtimeOnly "org.jetbrains.kotlin:atomicfu:please-add-dependency-in-your-project"

    testImplementation gradleTestKit()
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'
    testImplementation 'junit:junit:4.12'
}

configurations {
    testPluginClasspath {
        attributes {
            attribute(
                    Usage.USAGE_ATTRIBUTE,
                    project.objects.named(Usage.class, Usage.JAVA_RUNTIME)
            )
            attribute(
                    Category.CATEGORY_ATTRIBUTE,
                    project.objects.named(Category.class, Category.LIBRARY)
            )
        }
    }
}

dependencies {
    testPluginClasspath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
}

evaluationDependsOn(':atomicfu')
